<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>PyEpoc: PyEpoc.EpocHandler Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.2 -->
<script type="text/javascript">
<!--
function changeDisplayState (e){
  var num=this.id.replace(/[^[0-9]/g,'');
  var button=this.firstChild;
  var sectionDiv=document.getElementById('dynsection'+num);
  if (sectionDiv.style.display=='none'||sectionDiv.style.display==''){
    sectionDiv.style.display='block';
    button.src='open.gif';
  }else{
    sectionDiv.style.display='none';
    button.src='closed.gif';
  }
}
function initDynSections(){
  var divs=document.getElementsByTagName('div');
  var sectionCounter=1;
  for(var i=0;i<divs.length-1;i++){
    if(divs[i].className=='dynheader'&&divs[i+1].className=='dynsection'){
      var header=divs[i];
      var section=divs[i+1];
      var button=header.firstChild;
      if (button!='IMG'){
        divs[i].insertBefore(document.createTextNode(' '),divs[i].firstChild);
        button=document.createElement('img');
        divs[i].insertBefore(button,divs[i].firstChild);
      }
      header.style.cursor='pointer';
      header.onclick=changeDisplayState;
      header.id='dynheader'+sectionCounter;
      button.src='closed.gif';
      section.id='dynsection'+sectionCounter;
      section.style.display='none';
      section.style.marginLeft='14px';
      sectionCounter++;
    }
  }
}
window.onload = initDynSections;
-->
</script>
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="namespaces.htm"><span>Packages</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="namespace_py_epoc.htm">PyEpoc</a>.<a class="el" href="class_py_epoc_1_1_epoc_handler.htm">EpocHandler</a>
  </div>
</div>
<div class="contents">
<h1>PyEpoc.EpocHandler Class Reference</h1><!-- doxytag: class="PyEpoc::EpocHandler" -->
<p>The wrapper class.  
<a href="#_details">More...</a></p>

<p><a href="class_py_epoc_1_1_epoc_handler-members.htm">List of all members.</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5f8b0e8cc9147dbf5526893d85e8f4c5">EE_CognitivEventGetType</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv event type.  <a href="#a5f8b0e8cc9147dbf5526893d85e8f4c5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5ca2cba8f98be81d4ee822e8742a2e35">EE_CognitivGetActionSensitivity</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Action Sensitivity.  <a href="#a5ca2cba8f98be81d4ee822e8742a2e35"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ab65ec878050907524057a078221cb3fb">EE_CognitivGetActionSkillRating</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Action Skill Rating.  <a href="#ab65ec878050907524057a078221cb3fb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ab340c43dd0f6fdcb8c40533be934dfe0">EE_CognitivGetActivationLevel</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Activation Level.  <a href="#ab340c43dd0f6fdcb8c40533be934dfe0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ae267ede514f67e5748c1f542c578f8a9">EE_CognitivGetActiveActions</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Active Actions.  <a href="#ae267ede514f67e5748c1f542c578f8a9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a441a920ff07cf07082a27e1aa3536d2e">EE_CognitivGetOverallSkillRating</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Overall Cognitiv Skill Rating.  <a href="#a441a920ff07cf07082a27e1aa3536d2e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a47f360aea2de2f1231ca8bdd6272162c">EE_CognitivGetSignatureCacheSize</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Signature Cache Size.  <a href="#a47f360aea2de2f1231ca8bdd6272162c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a85d625669b0caba5b1794bffb4e49796">EE_CognitivGetSignatureCaching</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Signature Caching.  <a href="#a85d625669b0caba5b1794bffb4e49796"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a3e2b7a09f07604d673d1d201acd78d43">EE_CognitivGetTrainedSignatureActions</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Trained Signature Actions.  <a href="#a3e2b7a09f07604d673d1d201acd78d43"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a03e32f8e188ed9abbe2f8435ff2714ff">EE_CognitivGetTrainingAction</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Training Action.  <a href="#a03e32f8e188ed9abbe2f8435ff2714ff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8bbc6d64e7e8e87e3b367e20c60568a6">EE_CognitivGetTrainingTime</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Cognitiv Training Time.  <a href="#a8bbc6d64e7e8e87e3b367e20c60568a6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a32e1dacac428542ea0744c17ffd93c4c">EE_CognitivSetActionSensitivity</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Cognitiv Action Sensitivity.  <a href="#a32e1dacac428542ea0744c17ffd93c4c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a207470439231b14b579e1022ec6997f0">EE_CognitivSetActivationLevel</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Cognitiv Activation Level.  <a href="#a207470439231b14b579e1022ec6997f0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0cac822addcca73b2d8e84cbd1e7d2e6">EE_CognitivSetActiveActions</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Cognitiv Active Actions.  <a href="#a0cac822addcca73b2d8e84cbd1e7d2e6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a23447e3632aa26e6d37e50c489f32a1e">EE_CognitivSetSignatureCacheSize</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Cognitiv Signature Cache Size.  <a href="#a23447e3632aa26e6d37e50c489f32a1e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa8860cdba8f61c9a8b716e56e2f2e010">EE_CognitivSetSignatureCaching</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Cognitiv Signature Caching.  <a href="#aa8860cdba8f61c9a8b716e56e2f2e010"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa782bd7637e17cf0ebfe45b57cc4a41f">EE_CognitivSetTrainingAction</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Cognitiv Training Action.  <a href="#aa782bd7637e17cf0ebfe45b57cc4a41f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0004d4a0fbf14c3b36a57f2badceb163">EE_CognitivSetTrainingControl</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Cognitiv Training Control.  <a href="#a0004d4a0fbf14c3b36a57f2badceb163"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a188270e50b42ab4ad11142ff8903473e">EE_CognitivStartSamplingNeutral</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start Sampling Cognitiv Neutral.  <a href="#a188270e50b42ab4ad11142ff8903473e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ad9a3c13c45a38bb732ecc94b4d273f99">EE_CognitivStopSamplingNeutral</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stop Sampling Cognitiv Neutral.  <a href="#ad9a3c13c45a38bb732ecc94b4d273f99"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80">EE_EmoEngineEventCreate</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a handle for EmoEngine event.  <a href="#a1f4fd50879109d6ddb7f561e5dcc7a80"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a6f9f870bd8bb42385c04085438fdfa68">EE_EmoEngineEventFree</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free an event handle.  <a href="#a6f9f870bd8bb42385c04085438fdfa68"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a4637b3547347e8235588c49bd8ebbb7e">EE_EmoEngineEventGetEmoState</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get EmoState.  <a href="#a4637b3547347e8235588c49bd8ebbb7e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a3a5c906e5a0698ba0933db02288f80d6">EE_EmoEngineEventGetType</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get EmoEngine event type.  <a href="#a3a5c906e5a0698ba0933db02288f80d6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac70ae0a64da5705a16680a24d46b5acc">EE_EmoEngineEventGetUserId</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get user ID.  <a href="#ac70ae0a64da5705a16680a24d46b5acc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a134ce7f837e52b0a4bb959d310f33c62">EE_EmoStateCreate</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a handle to EmoState.  <a href="#a134ce7f837e52b0a4bb959d310f33c62"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#acd475194d92f5571868b3d14235d58a2">EE_EmoStateFree</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free EmoState.  <a href="#acd475194d92f5571868b3d14235d58a2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af2794c77c582fef202574792c0eee8c8">EE_EnableDiagnostics</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enables diagnostics logging.  <a href="#af2794c77c582fef202574792c0eee8c8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af849ea2764e8b2c81a357ec59e2c67d0">EE_EngineClearEventQueue</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clear EmoEngine event.  <a href="#af849ea2764e8b2c81a357ec59e2c67d0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0dcbc0d7e2e8cab631543deb891e6292">EE_EngineConnect</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initializes a connection to EmoEngine.  <a href="#a0dcbc0d7e2e8cab631543deb891e6292"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a78da306ac29a3a98707283a9f1c344d0">EE_EngineDisconnect</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Ends the connection to EmoEngine.  <a href="#a78da306ac29a3a98707283a9f1c344d0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ad18a746fd35557a8ba954664892de032">EE_EngineGetNextEvent</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieves the next EmoEngine event.  <a href="#ad18a746fd35557a8ba954664892de032"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a4d5d2cac329bb11b1e090b87c2ab7c42">EE_EngineGetNumUser</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get number of users.  <a href="#a4d5d2cac329bb11b1e090b87c2ab7c42"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abbc75402b89e5d9d664575efd603cd48">EE_EngineRemoteConnect</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initializes a connection to EmoComposer.  <a href="#abbc75402b89e5d9d664575efd603cd48"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a69718237d465750b4bbe61eafa42eb3f">EE_ExpressivEventGetType</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Expressiv event type.  <a href="#a69718237d465750b4bbe61eafa42eb3f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abfff3124721204c7505b1a81cee3ad22">EE_ExpressivGetSignatureType</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Expressiv Signature Type.  <a href="#abfff3124721204c7505b1a81cee3ad22"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a51a9641b23d0ee21c69affe1a8aaa7d9">EE_ExpressivGetThreshold</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Expressiv Threshold.  <a href="#a51a9641b23d0ee21c69affe1a8aaa7d9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a09a5acfd12f9c2c1967b0a8bac8d112a">EE_ExpressivGetTrainedSignatureActions</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Expressiv Trained Signature Actions.  <a href="#a09a5acfd12f9c2c1967b0a8bac8d112a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a9a52b2838de253340a0c90ffbeb85954">EE_ExpressivGetTrainedSignatureAvailable</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Expressiv Trained Signature Available Flag.  <a href="#a9a52b2838de253340a0c90ffbeb85954"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af5a1c054acc89a8b7165fb2ac82c6a95">EE_ExpressivGetTrainingAction</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Expressiv Training Action.  <a href="#af5a1c054acc89a8b7165fb2ac82c6a95"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac87bf37215c42305aa749e959016dc26">EE_ExpressivGetTrainingTime</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Expressiv Training Time.  <a href="#ac87bf37215c42305aa749e959016dc26"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a6299e75b7ad71d62c7505bfcd734d3a4">EE_ExpressivSetSignatureType</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Expressiv Signature Type.  <a href="#a6299e75b7ad71d62c7505bfcd734d3a4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a10012b5fe9c3f707c73a7a0ca13518cc">EE_ExpressivSetThreshold</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Expressiv Alghorithms Threshold.  <a href="#a10012b5fe9c3f707c73a7a0ca13518cc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aef7a47083a015e4196be5e51bf16b050">EE_ExpressivSetTrainingAction</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Expressiv Training Action.  <a href="#aef7a47083a015e4196be5e51bf16b050"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ad1b56b65b2ef6b284b48b743184d63d3">EE_ExpressivSetTrainingControl</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Expressiv Training Control.  <a href="#ad1b56b65b2ef6b284b48b743184d63d3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a14ec0d25c10a5642ade03f687f303f26">EE_GetBaseProfile</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Base Profile.  <a href="#a14ec0d25c10a5642ade03f687f303f26"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa3fa5c98cab11745256149c4c0c74641">EE_GetUserProfile</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get User Profile.  <a href="#aa3fa5c98cab11745256149c4c0c74641"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abd624a0286d8a6d36b3ffbed39da40dc">EE_GetUserProfileBytes</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get User Profile Bytes.  <a href="#abd624a0286d8a6d36b3ffbed39da40dc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a431c779fcee366c14da531dc1222a65e">EE_GetUserProfileSize</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get User Profile Size.  <a href="#a431c779fcee366c14da531dc1222a65e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a9d224c0d441172ebca9e83285f93c58f">EE_HardwareGetVersion</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Emotiv hardware versions.  <a href="#a9d224c0d441172ebca9e83285f93c58f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a6549fef4c7115532abf8628ce92e9065">EE_HeadsetGetGyroDelta</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Headset Gyro Delta.  <a href="#a6549fef4c7115532abf8628ce92e9065"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f3cd73d7823fdb88efda2e84215c742">EE_HeadsetGetSensorDetails</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Headset Sensor Details.  <a href="#a1f3cd73d7823fdb88efda2e84215c742"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a4da4a8c777083025f1aed70a16adb22a">EE_HeadsetGyroRezero</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rezero Headset Gyro.  <a href="#a4da4a8c777083025f1aed70a16adb22a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ae09f9edb953f3075e9445e98f582175f">EE_LoadUserProfile</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Load User Profile.  <a href="#ae09f9edb953f3075e9445e98f582175f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ab2879c2fb95b4ce20bde0273db184a52">EE_OptimizationDisable</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Disable Optimization.  <a href="#ab2879c2fb95b4ce20bde0273db184a52"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a00ebe9898c24a2258717504c9b6701bc">EE_OptimizationEnable</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable Optimization.  <a href="#a00ebe9898c24a2258717504c9b6701bc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ab203f6f2a5c399286fd295e26fd33bf9">EE_OptimizationGetParam</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Optimization Parameter.  <a href="#ab203f6f2a5c399286fd295e26fd33bf9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5d6f6c0f1c8d7af6c0c2be8829dbaac9">EE_OptimizationGetVitalAlgorithm</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Vital Optimization Algorithm.  <a href="#a5d6f6c0f1c8d7af6c0c2be8829dbaac9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aeb8dbe3d518fac316a3f694f8bf32e3a">EE_OptimizationIsEnabled</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is Optimization Enabled.  <a href="#aeb8dbe3d518fac316a3f694f8bf32e3a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a15b97df091dbf88f0f4c6feb70420c96">EE_OptimizationParamCreate</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create Optimization Parameter Handle.  <a href="#a15b97df091dbf88f0f4c6feb70420c96"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a556089d77ebf0917ebfc19271242edf6">EE_OptimizationParamFree</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Free Optimization Parameter Handle.  <a href="#a556089d77ebf0917ebfc19271242edf6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ad53fb7d6ab07ff3db08be0dadf156490">EE_OptimizationSetVitalAlgorithm</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Vital Optimization Algorithm.  <a href="#ad53fb7d6ab07ff3db08be0dadf156490"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a731486a2c0aa1e327a4eeaae74c2204c">EE_ProfileEventCreate</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a handle to EmoEngine profile event.  <a href="#a731486a2c0aa1e327a4eeaae74c2204c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac6eb400d17be17a0f319b3ea726fee37">EE_ResetDetection</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reset Detection.  <a href="#ac6eb400d17be17a0f319b3ea726fee37"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a4415700458a1456eb9af5b6c57b373d5">EE_SaveUserProfile</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Save User Profile.  <a href="#a4415700458a1456eb9af5b6c57b373d5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0eb197157c279171f33f2df65810f090">EE_SetHardwarePlayerDisplay</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set Player number on display.  <a href="#a0eb197157c279171f33f2df65810f090"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aecb6bfe02dae4286a4e08c9193f61f4e">EE_SetUserProfile</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set User Profile.  <a href="#aecb6bfe02dae4286a4e08c9193f61f4e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a01ec1b28855539b83a575593f8950c58">EE_SoftwareGetVersion</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Software Version.  <a href="#a01ec1b28855539b83a575593f8950c58"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a33ec50004b7518e4ab0c9f7123a5393f">ES_AffectivEqual</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is Affectiv EmoStates Equal.  <a href="#a33ec50004b7518e4ab0c9f7123a5393f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0555ab6c907ae47154330662edc76009">ES_AffectivGetEngagementBoredomScore</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Affectiv Engagement/Boredom Score.  <a href="#a0555ab6c907ae47154330662edc76009"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aafd92d310d45fa65bfd3d0df4550f9f2">ES_AffectivGetExcitementLongTermScore</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Long Term Affectiv Excitement Score.  <a href="#aafd92d310d45fa65bfd3d0df4550f9f2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af5fce191e173ab1ed3492d613446c852">ES_AffectivGetExcitementShortTermScore</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Short Term Affectiv Excitement Score.  <a href="#af5fce191e173ab1ed3492d613446c852"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a6b0da011bb95e768afda214d6ca67b05">ES_AffectivGetFrustrationScore</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Affectiv Frustration Score.  <a href="#a6b0da011bb95e768afda214d6ca67b05"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af27c61f6191559306a0b5382e4c99f91">ES_AffectivGetMeditationScore</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Affectiv Meditation Score.  <a href="#af27c61f6191559306a0b5382e4c99f91"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a4e2469fda9af801db373cd495827c504">ES_AffectivIsActive</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is Affectiv Active.  <a href="#a4e2469fda9af801db373cd495827c504"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac58a67ce58ecfdf441ed35961094f6ca">ES_CognitivEqual</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is Cognitiv EmoStates Equal.  <a href="#ac58a67ce58ecfdf441ed35961094f6ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7f9efe32fdc548dec0cf46830eaee072">ES_CognitivGetCurrentAction</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Current Cognitiv Action.  <a href="#a7f9efe32fdc548dec0cf46830eaee072"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a622561d0f04f2911e0ecdf18aa74a3c2">ES_CognitivGetCurrentActionPower</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Current Cognitiv Action Power.  <a href="#a622561d0f04f2911e0ecdf18aa74a3c2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac7d76a241500b3d931f4f66dfef79fc8">ES_CognitivIsActive</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is Cognitiv Active.  <a href="#ac7d76a241500b3d931f4f66dfef79fc8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#adc2095382b1c4c030c9b82d3cfb0c1f0">ES_Copy</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clone EmoStateHandle.  <a href="#adc2095382b1c4c030c9b82d3cfb0c1f0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8b78caed639ba1fbac07d276af56095c">ES_EmoEngineEqual</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is EmoEngine States Equal.  <a href="#a8b78caed639ba1fbac07d276af56095c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a51749119c8c61143d9151ae7a04efd00">ES_Equal</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is EmoStateHandles Identical.  <a href="#a51749119c8c61143d9151ae7a04efd00"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0332bcb2a24a3da4ae8f3755b2d83f6d">ES_ExpressivEqual</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is Expressiv EmoStates Equal.  <a href="#a0332bcb2a24a3da4ae8f3755b2d83f6d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8e0ccc2d09ff7073555b7919f1dd784b">ES_ExpressivGetClenchExtent</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Clench Extent.  <a href="#a8e0ccc2d09ff7073555b7919f1dd784b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a221b6336fa02f2b5108e174d1a2d3a9a">ES_ExpressivGetEyebrowExtent</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Eyebrow Extent.  <a href="#a221b6336fa02f2b5108e174d1a2d3a9a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ae7fa4a49851f017f569e3455abd4aac5">ES_ExpressivGetEyelidState</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Eyelid State.  <a href="#ae7fa4a49851f017f569e3455abd4aac5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a21be6fd4cd691579348ad85e317f9240">ES_ExpressivGetEyeLocation</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Eye Location.  <a href="#a21be6fd4cd691579348ad85e317f9240"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a269c3f768e949eaf5d22e91ed5b25d10">ES_ExpressivGetLowerFaceAction</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Lower Face Action.  <a href="#a269c3f768e949eaf5d22e91ed5b25d10"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1c13c32f15fe2d650212ff0afe591691">ES_ExpressivGetLowerFaceActionPower</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Lower Face Action Power.  <a href="#a1c13c32f15fe2d650212ff0afe591691"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac6478046f17d147c21fb258fa692ae64">ES_ExpressivGetSmileExtent</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Smile Extent.  <a href="#ac6478046f17d147c21fb258fa692ae64"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aaa78abf96688b85ef52ce9440c3c0b4d">ES_ExpressivGetUpperFaceAction</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Upper Face Action.  <a href="#aaa78abf96688b85ef52ce9440c3c0b4d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0fca49f2c918c7e578495b619a1520fb">ES_ExpressivGetUpperFaceActionPower</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Upper Face Action Power.  <a href="#a0fca49f2c918c7e578495b619a1520fb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a61768028d24bd2c1ad9d9084ad079703">ES_ExpressivIsActive</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is Expressiv Active.  <a href="#a61768028d24bd2c1ad9d9084ad079703"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187">ES_ExpressivIsBlink</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Blinking.  <a href="#aa2696a468a0b7da95fa2409f22e93187"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7">ES_ExpressivIsEyesOpen</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Eyes Open.  <a href="#a8efb1f15bf8b40ad41dd875931dff5d7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d">ES_ExpressivIsLeftWink</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Left Winking.  <a href="#af997da9f8db6546c11bc5c08ef5c4d5d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af1ac338915ee49d93b4c02a31bd1a594">ES_ExpressivIsLookingDown</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Looking Down.  <a href="#af1ac338915ee49d93b4c02a31bd1a594"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5adeaa76953d48ba83c779786f4ebdfe">ES_ExpressivIsLookingLeft</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Looking Left.  <a href="#a5adeaa76953d48ba83c779786f4ebdfe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa73cb70db5864e59124cd579c07ec56f">ES_ExpressivIsLookingRight</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Looking Right.  <a href="#aa73cb70db5864e59124cd579c07ec56f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7d658a9c8f134499590b2e41f353bb0b">ES_ExpressivIsLookingUp</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Looking Up.  <a href="#a7d658a9c8f134499590b2e41f353bb0b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512">ES_ExpressivIsRightWink</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Expression Right Winking.  <a href="#abc54d16b753a9ba914ea394dc30a8512"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a6e27c6a8b331e5e1c0415594eb3c9e53">ES_GetBatteryChargeLevel</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Battery Charge Level.  <a href="#a6e27c6a8b331e5e1c0415594eb3c9e53"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8a1762c564e8ca49112d274c94146f1f">ES_GetContactQuality</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Contact Quality.  <a href="#a8a1762c564e8ca49112d274c94146f1f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a37e16b7c066e36fad0b320ae1dc65542">ES_GetContactQualityFromAllChannels</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Contact Quality From All Channels.  <a href="#a37e16b7c066e36fad0b320ae1dc65542"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af91e99ded2ba15eada0879d09f6fea79">ES_GetHeadsetOn</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Headset On/Off.  <a href="#af91e99ded2ba15eada0879d09f6fea79"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a99ca22609f25a62e857867409178ce49">ES_GetNumContactQualityChannels</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Number Of Channels With Contact Quality Data.  <a href="#a99ca22609f25a62e857867409178ce49"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a04590107c58fc8462397fa5ea36add9a">ES_GetTimeFromStart</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Time From Start.  <a href="#a04590107c58fc8462397fa5ea36add9a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">def&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aeac246aea82974e7813733c58e31f01d">ES_GetWirelessSignalStatus</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get Wireless Signal Status.  <a href="#aeac246aea82974e7813733c58e31f01d"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>The wrapper class. </p>
<p>This class creates a link to Emotiv's DLL and it's functions. </p>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a5f8b0e8cc9147dbf5526893d85e8f4c5"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivEventGetType" ref="a5f8b0e8cc9147dbf5526893d85e8f4c5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivEventGetType </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv event type. </p>
<p>Returns the Cognitiv-specific event type for an EE_CognitivEvent event already retrieved using EE_EngineGetNextEvent. <br/>
 </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle, created by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#adeba2dfee83697462f61aef1f95f815c" title="Cognitiv Events.">COGEVENT</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5ca2cba8f98be81d4ee822e8742a2e35"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetActionSensitivity" ref="a5ca2cba8f98be81d4ee822e8742a2e35" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetActionSensitivity </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Action Sensitivity. </p>
<p>Query the sensitivity of Cognitiv actions. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, action1sens, action2sens, action3sens, action4sens) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a32e1dacac428542ea0744c17ffd93c4c" title="Set Cognitiv Action Sensitivity.">EpocHandler.EE_CognitivSetActionSensitivity()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab65ec878050907524057a078221cb3fb"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetActionSkillRating" ref="ab65ec878050907524057a078221cb3fb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetActionSkillRating </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>action</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Action Skill Rating. </p>
<p>Gets the current skill rating for particular Cognitiv actions of the user. Blocking call. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>action</em>&nbsp;</td><td>int, <a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, float skillrating) </dd></dl>

</div>
</div>
<a class="anchor" id="ab340c43dd0f6fdcb8c40533be934dfe0"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetActivationLevel" ref="ab340c43dd0f6fdcb8c40533be934dfe0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetActivationLevel </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Activation Level. </p>
<p>Get the overall sensitivity for all Cognitiv actions (Min 1 Max 10) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, int level) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a207470439231b14b579e1022ec6997f0" title="Set Cognitiv Activation Level.">EpocHandler.EE_CognitivSetActivationLevel()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae267ede514f67e5748c1f542c578f8a9"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetActiveActions" ref="ae267ede514f67e5748c1f542c578f8a9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetActiveActions </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Active Actions. </p>
<p>Get the current Cognitiv active action types. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, ulong activeactions) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000007">Todo:</a></b></dt><dd>Find out what bitvectors are. </dd></dl>
<dl class="test"><dt><b><a class="el" href="test.htm#_test000001">Test:</a></b></dt><dd>Test it! </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a441a920ff07cf07082a27e1aa3536d2e"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetOverallSkillRating" ref="a441a920ff07cf07082a27e1aa3536d2e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetOverallSkillRating </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Overall Cognitiv Skill Rating. </p>
<p>Gets the current overall skill rating of the user in Cognitiv. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, float overallskillrating) </dd></dl>
<dl class="note"><dt><b>Note:</b></dt><dd>Representation error (0.70 in EmoComposer returned 0.69999998807907104) </dd></dl>

</div>
</div>
<a class="anchor" id="a47f360aea2de2f1231ca8bdd6272162c"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetSignatureCacheSize" ref="a47f360aea2de2f1231ca8bdd6272162c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetSignatureCacheSize </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Signature Cache Size. </p>
<p>Get the current cache size for the signature caching in Cognitiv (0 = unlimited) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, int size) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a23447e3632aa26e6d37e50c489f32a1e" title="Set Cognitiv Signature Cache Size.">EpocHandler.EE_CognitivSetSignatureCacheSize()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a85d625669b0caba5b1794bffb4e49796"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetSignatureCaching" ref="a85d625669b0caba5b1794bffb4e49796" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetSignatureCaching </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Signature Caching. </p>
<p>Get the status of signature caching in Cognitiv </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, int flag) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa8860cdba8f61c9a8b716e56e2f2e010" title="Set Cognitiv Signature Caching.">EpocHandler.EE_CognitivSetSignatureCaching()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3e2b7a09f07604d673d1d201acd78d43"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetTrainedSignatureActions" ref="a3e2b7a09f07604d673d1d201acd78d43" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetTrainedSignatureActions </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Trained Signature Actions. </p>
<p>Gets a list of the Cognitiv actions that have been trained by the user. call </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, ulong trainedactions) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> </dd></dl>
<dl class="test"><dt><b><a class="el" href="test.htm#_test000002">Test:</a></b></dt><dd>Test it! </dd></dl>

</div>
</div>
<a class="anchor" id="a03e32f8e188ed9abbe2f8435ff2714ff"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetTrainingAction" ref="a03e32f8e188ed9abbe2f8435ff2714ff" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetTrainingAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Training Action. </p>
<p>Get the type of Cognitiv action currently selected for training. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, <a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a>) </dd></dl>

</div>
</div>
<a class="anchor" id="a8bbc6d64e7e8e87e3b367e20c60568a6"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivGetTrainingTime" ref="a8bbc6d64e7e8e87e3b367e20c60568a6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivGetTrainingTime </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Cognitiv Training Time. </p>
<p>Return the duration of a Cognitiv training session in ms. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, int trainingms) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a32e1dacac428542ea0744c17ffd93c4c"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivSetActionSensitivity" ref="a32e1dacac428542ea0744c17ffd93c4c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivSetActionSensitivity </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>action1sens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>action2sens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>action3sens</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>action4sens</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Cognitiv Action Sensitivity. </p>
<p>Set the sensitivity of Cognitiv actions (lowest 1 - highest 10) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>action1sens</em>&nbsp;</td><td>int, sensitivity of action 1 </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>action2sens</em>&nbsp;</td><td>int, sensitivity of action 2 </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>action3sens</em>&nbsp;</td><td>int, sensitivity of action 3 </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>action4sens</em>&nbsp;</td><td>int, sensitivity of action 4 </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="test"><dt><b><a class="el" href="test.htm#_test000003">Test:</a></b></dt><dd>Test it! </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000008">Todo:</a></b></dt><dd>Find out what this does. </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5ca2cba8f98be81d4ee822e8742a2e35" title="Get Cognitiv Action Sensitivity.">EpocHandler.EE_CognitivGetActionSensitivity()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a207470439231b14b579e1022ec6997f0"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivSetActivationLevel" ref="a207470439231b14b579e1022ec6997f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivSetActivationLevel </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>level</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Cognitiv Activation Level. </p>
<p>Set the overall sensitivity for all Cognitiv actions (lowest 1 - highest 7) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>level</em>&nbsp;</td><td>int, sensitivity level 1-7 </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ab340c43dd0f6fdcb8c40533be934dfe0" title="Get Cognitiv Activation Level.">EpocHandler.EE_CognitivGetActivationLevel()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0cac822addcca73b2d8e84cbd1e7d2e6"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivSetActiveActions" ref="a0cac822addcca73b2d8e84cbd1e7d2e6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivSetActiveActions </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>activeactions</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Cognitiv Active Actions. </p>
<p>Set the current Cognitiv active action types. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>activeactions</em>&nbsp;</td><td>bitvector, a bit vector composed of <a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> contants </td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000006">Todo:</a></b></dt><dd>Make it work! Find out what bitvectors are. </dd></dl>

</div>
</div>
<a class="anchor" id="a23447e3632aa26e6d37e50c489f32a1e"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivSetSignatureCacheSize" ref="a23447e3632aa26e6d37e50c489f32a1e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivSetSignatureCacheSize </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Cognitiv Signature Cache Size. </p>
<p>Set the cache size for the signature caching in Cognitiv </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>int, number of signatures to keep in cache (0 = unlimited) </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a47f360aea2de2f1231ca8bdd6272162c" title="Get Cognitiv Signature Cache Size.">EpocHandler.EE_CognitivGetSignatureCacheSize()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa8860cdba8f61c9a8b716e56e2f2e010"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivSetSignatureCaching" ref="aa8860cdba8f61c9a8b716e56e2f2e010" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivSetSignatureCaching </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>enable</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Cognitiv Signature Caching. </p>
<p>Enable or disable signature caching in Cognitiv (1 enable/0 disable) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>enable</em>&nbsp;</td><td>int, 1/0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a85d625669b0caba5b1794bffb4e49796" title="Get Cognitiv Signature Caching.">EpocHandler.EE_CognitivGetSignatureCaching()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa782bd7637e17cf0ebfe45b57cc4a41f"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivSetTrainingAction" ref="aa782bd7637e17cf0ebfe45b57cc4a41f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivSetTrainingAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>action</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Cognitiv Training Action. </p>
<p>Set the type of Cognitiv action to be trained. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>action</em>&nbsp;</td><td>int, <a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0004d4a0fbf14c3b36a57f2badceb163"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivSetTrainingControl" ref="a0004d4a0fbf14c3b36a57f2badceb163" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivSetTrainingControl </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>trainingcontrol</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Cognitiv Training Control. </p>
<p>Set the training control flag for Cognitiv training. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#aa3efe779d35b43eb7e681c289c2f3c1c" title="Cognitiv Training Control.">COGTRAININGCONTROL</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a188270e50b42ab4ad11142ff8903473e"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivStartSamplingNeutral" ref="a188270e50b42ab4ad11142ff8903473e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivStartSamplingNeutral </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start Sampling Cognitiv Neutral. </p>
<p>Start the sampling of Neutral state in Cognitiv. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ad9a3c13c45a38bb732ecc94b4d273f99" title="Stop Sampling Cognitiv Neutral.">EpocHandler.EE_CognitivStopSamplingNeutral()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad9a3c13c45a38bb732ecc94b4d273f99"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_CognitivStopSamplingNeutral" ref="ad9a3c13c45a38bb732ecc94b4d273f99" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_CognitivStopSamplingNeutral </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stop Sampling Cognitiv Neutral. </p>
<p>Stop the sampling of Neutral state in Cognitiv. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a188270e50b42ab4ad11142ff8903473e" title="Start Sampling Cognitiv Neutral.">EpocHandler.EE_CognitivStartSamplingNeutral()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1f4fd50879109d6ddb7f561e5dcc7a80"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EmoEngineEventCreate" ref="a1f4fd50879109d6ddb7f561e5dcc7a80" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EmoEngineEventCreate </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a handle for EmoEngine event. </p>
<p>This handle can be reused by the caller to retrieve events. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>handle, EmoEngineEventHandle </dd></dl>

</div>
</div>
<a class="anchor" id="a6f9f870bd8bb42385c04085438fdfa68"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EmoEngineEventFree" ref="a6f9f870bd8bb42385c04085438fdfa68" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EmoEngineEventFree </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Free an event handle. </p>
<p>This frees memory referenced by event handle. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle, created by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4637b3547347e8235588c49bd8ebbb7e"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EmoEngineEventGetEmoState" ref="a4637b3547347e8235588c49bd8ebbb7e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EmoEngineEventGetEmoState </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get EmoState. </p>
<p>Copies an EmoState returned with a EE_EmoStateUpdate event to memory referenced by an EmoStateHandle. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle, returned by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> and populated with EE_EmoEngineGetNextEvent() </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td>handle, returned by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a134ce7f837e52b0a4bb959d310f33c62" title="Create a handle to EmoState.">EE_EmoStateCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a3a5c906e5a0698ba0933db02288f80d6"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EmoEngineEventGetType" ref="a3a5c906e5a0698ba0933db02288f80d6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EmoEngineEventGetType </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get EmoEngine event type. </p>
<p>Returns the event type for an event already retrieved using EE_EngineGetNextEvent. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#a36ab5af76cc5def4563ec311f089665a" title="Emotiv Events.">EVENT</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac70ae0a64da5705a16680a24d46b5acc"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EmoEngineEventGetUserId" ref="ac70ae0a64da5705a16680a24d46b5acc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EmoEngineEventGetUserId </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get user ID. </p>
<p>Retrieves the user ID for EE_UserAdded and EE_UserRemoved events. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, userID) </dd></dl>

</div>
</div>
<a class="anchor" id="a134ce7f837e52b0a4bb959d310f33c62"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EmoStateCreate" ref="a134ce7f837e52b0a4bb959d310f33c62" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EmoStateCreate </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a handle to EmoState. </p>
<p>Returns a handle to memory that can store an EmoState. This handle can be reused by the caller to retrieve subsequent EmoStates. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>handle </dd></dl>

</div>
</div>
<a class="anchor" id="acd475194d92f5571868b3d14235d58a2"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EmoStateFree" ref="acd475194d92f5571868b3d14235d58a2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EmoStateFree </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Free EmoState. </p>
<p>Frees memory referenced by an EmoState handle. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td>handle, created by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a134ce7f837e52b0a4bb959d310f33c62" title="Create a handle to EmoState.">EE_EmoStateCreate()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af2794c77c582fef202574792c0eee8c8"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EnableDiagnostics" ref="af2794c77c582fef202574792c0eee8c8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EnableDiagnostics </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emotivlogfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>enabled</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enables diagnostics logging. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emotivlogfile</em>&nbsp;</td><td>str, filepath </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>enabled</em>&nbsp;</td><td>int, 1 enable / 0 disable </td></tr>
  </table>
  </dd>
</dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>This should only be enabled if instructed to do so by Emotiv developer support for the purposes of collecting diagnostic information. </dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>edkErrorCode.h </dd></dl>

</div>
</div>
<a class="anchor" id="af849ea2764e8b2c81a357ec59e2c67d0"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EngineClearEventQueue" ref="af849ea2764e8b2c81a357ec59e2c67d0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EngineClearEventQueue </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>eventtypes</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clear EmoEngine event. </p>
<p>Clear a specific EmoEngine event type or all events currently inside the event queue. Event flags can be combined together as one argument except EE_UnknownEvent and EE_EmulatorError.<br/>
 </p>
<dl class="note"><dt><b>Note:</b></dt><dd>ERRCODE['EDK_OK'] if the events have been cleared from the queue.<br/>
 ERRCODE['EDK_INVALID_PARAMETER'] if input event types are invalid.<br/>
 </dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>eventtypes</em>&nbsp;</td><td>list, EmoEngine event types (<a class="el" href="namespace_py_epoc.htm#a36ab5af76cc5def4563ec311f089665a" title="Emotiv Events.">EVENT</a>) </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0dcbc0d7e2e8cab631543deb891e6292"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EngineConnect" ref="a0dcbc0d7e2e8cab631543deb891e6292" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EngineConnect </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initializes a connection to EmoEngine. </p>
<p>This function should be called at the beginning of programs. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>: <a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abbc75402b89e5d9d664575efd603cd48" title="Initializes a connection to EmoComposer.">EpocHandler.EE_EngineRemoteConnect()</a> </dd>
<dd>
edkErrorCode.h </dd></dl>

</div>
</div>
<a class="anchor" id="a78da306ac29a3a98707283a9f1c344d0"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EngineDisconnect" ref="a78da306ac29a3a98707283a9f1c344d0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EngineDisconnect </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Ends the connection to EmoEngine. </p>
<p>Closes the connection to EmoEngine. This function should be called at the end of programs. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd>edkErrorCode.h </dd></dl>

</div>
</div>
<a class="anchor" id="ad18a746fd35557a8ba954664892de032"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EngineGetNextEvent" ref="ad18a746fd35557a8ba954664892de032" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EngineGetNextEvent </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieves the next EmoEngine event. </p>
<p>Non-blocking call. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>ERRCODE['EDK_OK'] if a new event has been retrieved. ERRCODE['EDK_NO_EVENT'] if no new events have been generated by EmoEngine. </dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle created by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4d5d2cac329bb11b1e090b87c2ab7c42"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EngineGetNumUser" ref="a4d5d2cac329bb11b1e090b87c2ab7c42" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EngineGetNumUser </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of users. </p>
<p>Retrieves the number of users on the engine. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, numberofusers) </dd></dl>

</div>
</div>
<a class="anchor" id="abbc75402b89e5d9d664575efd603cd48"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_EngineRemoteConnect" ref="abbc75402b89e5d9d664575efd603cd48" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_EngineRemoteConnect </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>ip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>port</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initializes a connection to EmoComposer. </p>
<p>This function should be called at the beginning of programs. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ip</em>&nbsp;</td><td>str, IP address of the host </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>port</em>&nbsp;</td><td>int, the port of the host </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0dcbc0d7e2e8cab631543deb891e6292" title="Initializes a connection to EmoEngine.">EpocHandler.EE_EngineConnect()</a> </dd>
<dd>
edkErrorCode.h </dd></dl>
<dl class="note"><dt><b>Note:</b></dt><dd>For Emotiv Control Panel use port 3008. For EmoComposer use port 1726. </dd></dl>

</div>
</div>
<a class="anchor" id="a69718237d465750b4bbe61eafa42eb3f"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivEventGetType" ref="a69718237d465750b4bbe61eafa42eb3f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivEventGetType </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Expressiv event type. </p>
<p>Returns the Expressiv-specific event type for an EE_ExpressivEvent event already retrieved using EE_EngineGetNextEvent. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle, created by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#a1acfdc751ad4772cf2afc37ea1102538" title="Expressiv Events.">EXPEVENT</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abfff3124721204c7505b1a81cee3ad22"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivGetSignatureType" ref="abfff3124721204c7505b1a81cee3ad22" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivGetSignatureType </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Expressiv Signature Type. </p>
<p>Indicates whether the Expressiv suite is currently using either the built-in, universal signature or a trained signature. Blocking call </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> , int sigtype) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd>
<dd>
<a class="el" href="namespace_py_epoc.htm#a0301226aec786e89ba1d030e8fbadcb2" title="Expressiv Signature.">EXPRSIGNATURE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a51a9641b23d0ee21c69affe1a8aaa7d9"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivGetThreshold" ref="a51a9641b23d0ee21c69affe1a8aaa7d9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivGetThreshold </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>expressivalgoname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>thresholdname</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Expressiv Threshold. </p>
<p>Get threshold from Expressiv algorithms. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>expressivalgoname</em>&nbsp;</td><td><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a> </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>thresholdname</em>&nbsp;</td><td><a class="el" href="namespace_py_epoc.htm#a15c693515d99ad223eb85b960891328b" title="Expressiv Threshold.">EXPRTHRESHOLD</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> , int value) </dd></dl>

</div>
</div>
<a class="anchor" id="a09a5acfd12f9c2c1967b0a8bac8d112a"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivGetTrainedSignatureActions" ref="a09a5acfd12f9c2c1967b0a8bac8d112a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivGetTrainedSignatureActions </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Expressiv Trained Signature Actions. </p>
<p>Gets a list of the actions that have been trained by the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> , bitvector trainedactions) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000005">Todo:</a></b></dt><dd>make it work!! figure out bitvector </dd></dl>

</div>
</div>
<a class="anchor" id="a9a52b2838de253340a0c90ffbeb85954"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivGetTrainedSignatureAvailable" ref="a9a52b2838de253340a0c90ffbeb85954" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivGetTrainedSignatureAvailable </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Expressiv Trained Signature Available Flag. </p>
<p>Gets a flag indicating if the user has trained sufficient actions to activate a trained signature. return[1] will be set to 1 if the user has trained EXP_NEUTRAL and at least one other Expressiv action. Otherwise, return[1] = 0. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> , int flag) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af5a1c054acc89a8b7165fb2ac82c6a95"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivGetTrainingAction" ref="af5a1c054acc89a8b7165fb2ac82c6a95" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivGetTrainingAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Expressiv Training Action. </p>
<p>Gets the facial expression currently selected for Expressiv training. Blocking call. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, int action) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a> </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000004">Todo:</a></b></dt><dd>check return value [1] </dd></dl>

</div>
</div>
<a class="anchor" id="ac87bf37215c42305aa749e959016dc26"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivGetTrainingTime" ref="ac87bf37215c42305aa749e959016dc26" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivGetTrainingTime </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Expressiv Training Time. </p>
<p>Return the duration of a Expressiv training session in ms. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, int time) </dd></dl>

</div>
</div>
<a class="anchor" id="a6299e75b7ad71d62c7505bfcd734d3a4"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivSetSignatureType" ref="a6299e75b7ad71d62c7505bfcd734d3a4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivSetSignatureType </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>expsigtype</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Expressiv Signature Type. </p>
<p>Configures the Expressiv suite to use either the built-in, universal signature or a personal, trained signature. Note: Expressiv defaults to use its universal signature. This function will fail if <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a9a52b2838de253340a0c90ffbeb85954" title="Get Expressiv Trained Signature Available Flag.">EE_ExpressivGetTrainedSignatureAvailable()</a> returns false. Blocking call </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>expsigtype</em>&nbsp;</td><td><a class="el" href="namespace_py_epoc.htm#a0301226aec786e89ba1d030e8fbadcb2" title="Expressiv Signature.">EXPRSIGNATURE</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a10012b5fe9c3f707c73a7a0ca13518cc"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivSetThreshold" ref="a10012b5fe9c3f707c73a7a0ca13518cc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivSetThreshold </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>expressivalgoname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>thresholdname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>value</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Expressiv Alghorithms Threshold. </p>
<p>Set threshold for Expressiv algorithms. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>expressivalgoname</em>&nbsp;</td><td><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a> </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>thresholdname</em>&nbsp;</td><td><a class="el" href="namespace_py_epoc.htm#a15c693515d99ad223eb85b960891328b" title="Expressiv Threshold.">EXPRTHRESHOLD</a> </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>value</em>&nbsp;</td><td>int, threshold value (min: 0 max: 1000) </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aef7a47083a015e4196be5e51bf16b050"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivSetTrainingAction" ref="aef7a47083a015e4196be5e51bf16b050" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivSetTrainingAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>expressivalgoname</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Expressiv Training Action. </p>
<p>Set the current facial expression for Expressiv training. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>expressivalgoname</em>&nbsp;</td><td><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ad1b56b65b2ef6b284b48b743184d63d3"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ExpressivSetTrainingControl" ref="ad1b56b65b2ef6b284b48b743184d63d3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ExpressivSetTrainingControl </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>control</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Expressiv Training Control. </p>
<p>Set the control flag for Expressiv training. Blocking call. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>int,User</em>&nbsp;</td><td>ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>control</em>&nbsp;</td><td><a class="el" href="namespace_py_epoc.htm#af1666e8009f2be3812e1eb8007b7e6f4" title="Expressiv Training Control.">EXPRTRAININGCONTROL</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> - current status of EmoEngine. If the query is successful, returns EDK_OK. </dd></dl>

</div>
</div>
<a class="anchor" id="a14ec0d25c10a5642ade03f687f303f26"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_GetBaseProfile" ref="a14ec0d25c10a5642ade03f687f303f26" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_GetBaseProfile </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Base Profile. </p>
<p>Returns a serialized user profile for a default user in a synchronous manner. Fills in the event referred to by emoengineeventhandle with an EE_ProfileEvent event that contains the profile data for the default user </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle, returned by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa3fa5c98cab11745256149c4c0c74641"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_GetUserProfile" ref="aa3fa5c98cab11745256149c4c0c74641" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_GetUserProfile </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get User Profile. </p>
<p>Returns user profile data in a synchronous manner. Fills in the event referred to by emoengineeventhandle with an EE_ProfileEvent event that contains the profile data for the specified user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhan</em>&nbsp;</td><td>handle,returned by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abd624a0286d8a6d36b3ffbed39da40dc"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_GetUserProfileBytes" ref="abd624a0286d8a6d36b3ffbed39da40dc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_GetUserProfileBytes </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>bufferlength</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get User Profile Bytes. </p>
<p>Returns a serialized version of the requested user profile. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle, something something </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>bufferlength</em>&nbsp;</td><td>int, size of buffer in bytes </td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000003">Todo:</a></b></dt><dd>make it work!! </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a431c779fcee366c14da531dc1222a65e" title="Get User Profile Size.">EpocHandler.EE_GetUserProfileSize()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a431c779fcee366c14da531dc1222a65e"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_GetUserProfileSize" ref="a431c779fcee366c14da531dc1222a65e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_GetUserProfileSize </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emoengineeventhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get User Profile Size. </p>
<p>Retrieves the number of bytes required to store a serialized version of the requested user profile. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emoengineeventhandle</em>&nbsp;</td><td>handle, returned by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1f4fd50879109d6ddb7f561e5dcc7a80" title="Create a handle for EmoEngine event.">EE_EmoEngineEventCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, int sizeinbytes) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000002">Todo:</a></b></dt><dd>figure out why it gives EDK_INVALID_PARAMETER </dd></dl>

</div>
</div>
<a class="anchor" id="a9d224c0d441172ebca9e83285f93c58f"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_HardwareGetVersion" ref="a9d224c0d441172ebca9e83285f93c58f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_HardwareGetVersion </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Emotiv hardware versions. </p>
<p>This returns the Emotiv hardware version numbers (as hex) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, user ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, (headsetversion,dongleversion)) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000009">Todo:</a></b></dt><dd>Get rid if the "invalid literal for int() with base 10" error that occurs when trying to int() the versions. </dd></dl>

</div>
</div>
<a class="anchor" id="a6549fef4c7115532abf8628ce92e9065"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_HeadsetGetGyroDelta" ref="a6549fef4c7115532abf8628ce92e9065" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_HeadsetGetGyroDelta </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Headset Gyro Delta. </p>
<p>Returns the delta of the movement of the gyro since the previous call for a particular user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, (xpos, ypos)) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a4da4a8c777083025f1aed70a16adb22a" title="Rezero Headset Gyro.">EpocHandler.EE_HeadsetGyroRezero()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1f3cd73d7823fdb88efda2e84215c742"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_HeadsetGetSensorDetails" ref="a1f3cd73d7823fdb88efda2e84215c742" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_HeadsetGetSensorDetails </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>channelid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Headset Sensor Details. </p>
<p>Returns a struct containing details about the specified EEG channel's headset. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>channelid</em>&nbsp;</td><td>int, <a class="el" href="namespace_py_epoc.htm#abbb04e7788f2c405c173ed5ee82df869" title="Input Channels.">INPUTCHANNELS</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>( <a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, <a class="el" href="class_py_epoc_1_1_input_sensor_descriptor.htm" title="Input sensor description struct.">InputSensorDescriptor</a> ) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a href="http://docs.python.org/library/ctypes.html#structured-data-types">http://docs.python.org/library/ctypes.html#structured-data-types</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a4da4a8c777083025f1aed70a16adb22a"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_HeadsetGyroRezero" ref="a4da4a8c777083025f1aed70a16adb22a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_HeadsetGyroRezero </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rezero Headset Gyro. </p>
<p>Re-zero the gyro for a particular user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a6549fef4c7115532abf8628ce92e9065" title="Get Headset Gyro Delta.">EpocHandler.EE_HeadsetGetGyroDelta()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae09f9edb953f3075e9445e98f582175f"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_LoadUserProfile" ref="ae09f9edb953f3075e9445e98f582175f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_LoadUserProfile </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>inputfilename</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Load User Profile. </p>
<p>Loads a user profile from disk and assigns it to the specified user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>inputfilename</em>&nbsp;</td><td>str, filepath </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a4415700458a1456eb9af5b6c57b373d5" title="Save User Profile.">EpocHandler.EE_SaveUserProfile()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab2879c2fb95b4ce20bde0273db184a52"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationDisable" ref="ab2879c2fb95b4ce20bde0273db184a52" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationDisable </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Disable Optimization. </p>
<p>Disable optimization. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a00ebe9898c24a2258717504c9b6701bc"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationEnable" ref="a00ebe9898c24a2258717504c9b6701bc" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationEnable </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>optimizationparamhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable Optimization. </p>
<p>Enable optimization. EmoEngine will try to optimize its performance according to the information passed in with optimization parameter. EmoEngine guarantees the correctness of the results of vital algorithms. For algorithms that are not vital, results are undefined. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>optparamhandle</em>&nbsp;</td><td>handle, Handle created by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a15b97df091dbf88f0f4c6feb70420c96" title="Create Optimization Parameter Handle.">EpocHandler.EE_OptimizationParamCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ab203f6f2a5c399286fd295e26fd33bf9"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationGetParam" ref="ab203f6f2a5c399286fd295e26fd33bf9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationGetParam </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>optimizationparamhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Optimization Parameter. </p>
<p>Get optimization parameter. If optimization is not enabled (this can be checked with<br/>
 EpocHandler.EE_OptimmizationIsEnabled()) then the results attached to the hParam parameter are undefined. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>optparamhandle</em>&nbsp;</td><td>handle, Handle returned by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a15b97df091dbf88f0f4c6feb70420c96" title="Create Optimization Parameter Handle.">EpocHandler.EE_OptimizationParamCreate()</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5d6f6c0f1c8d7af6c0c2be8829dbaac9"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationGetVitalAlgorithm" ref="a5d6f6c0f1c8d7af6c0c2be8829dbaac9" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationGetVitalAlgorithm </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>optimizationparamhandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>suite</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Vital Optimization Algorithm. </p>
<p>Get a list of vital algorithms of specific suite from optimization parameter<br/>
 Returns <a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> and a list of vital algorithm composed of <a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a>,<br/>
 <a class="el" href="namespace_py_epoc.htm#a35d06f6fbfbde1da9252d7d47656fd5d" title="Affectiv Algorithms.">AFFECTIVALGO</a> or <a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> depending on the suite parameter. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, algbitvector) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000011">Todo:</a></b></dt><dd>make sure it works!! </dd></dl>

</div>
</div>
<a class="anchor" id="aeb8dbe3d518fac316a3f694f8bf32e3a"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationIsEnabled" ref="aeb8dbe3d518fac316a3f694f8bf32e3a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationIsEnabled </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is Optimization Enabled. </p>
<p>Determine whether optimization is on or not. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> , enabled) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000010">Todo:</a></b></dt><dd>check that it can become True </dd></dl>

</div>
</div>
<a class="anchor" id="a15b97df091dbf88f0f4c6feb70420c96"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationParamCreate" ref="a15b97df091dbf88f0f4c6feb70420c96" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationParamCreate </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create Optimization Parameter Handle. </p>
<p>Creates a handle to memory that can hold an optimization parameter which is used to configure the behaviour of optimization. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>optparam handle, Optimization parameter handle </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a556089d77ebf0917ebfc19271242edf6" title="Free Optimization Parameter Handle.">EpocHandler.EE_OptimizationParamFree()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a556089d77ebf0917ebfc19271242edf6"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationParamFree" ref="a556089d77ebf0917ebfc19271242edf6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationParamFree </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>optimizationparamhandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Free Optimization Parameter Handle. </p>
<p>Frees memory referenced by an optimization parameter handle. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>optparamhandle</em>&nbsp;</td><td>handle, Handle created by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a15b97df091dbf88f0f4c6feb70420c96" title="Create Optimization Parameter Handle.">EpocHandler.EE_OptimizationParamCreate()</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad53fb7d6ab07ff3db08be0dadf156490"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_OptimizationSetVitalAlgorithm" ref="ad53fb7d6ab07ff3db08be0dadf156490" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_OptimizationSetVitalAlgorithm </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>optimizationparamhandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>suite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>algbitvector</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Vital Optimization Algorithm. </p>
<p>Set a list of vital algorithms of specific suite to optimization parameter. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>param</em>&nbsp;</td><td>optparamhandle handle, Handle returned by <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a15b97df091dbf88f0f4c6feb70420c96" title="Create Optimization Parameter Handle.">EpocHandler.EE_OptimizationParamCreate()</a> </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>suite</em>&nbsp;</td><td>int, <a class="el" href="namespace_py_epoc.htm#a628d63af1db40e933bd033f8bd39c42a" title="Emotiv Detection Suites.">SUITE</a> </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>algbitvector</em>&nbsp;</td><td>bitvector, a list of vital algorithm composed of <a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a>, <a class="el" href="namespace_py_epoc.htm#a35d06f6fbfbde1da9252d7d47656fd5d" title="Affectiv Algorithms.">AFFECTIVALGO</a> or <a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> depending on the suite parameter passed in. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000012">Todo:</a></b></dt><dd>make sure it works!! </dd></dl>

</div>
</div>
<a class="anchor" id="a731486a2c0aa1e327a4eeaae74c2204c"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ProfileEventCreate" ref="a731486a2c0aa1e327a4eeaae74c2204c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ProfileEventCreate </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a handle to EmoEngine profile event. </p>
<p>details Returns a handle to memory that can hold a profile byte stream. This handle can be reused by the caller to retrieve subsequent profile bytes. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>handle, EmoEngineEventHandle </dd></dl>

</div>
</div>
<a class="anchor" id="ac6eb400d17be17a0f319b3ea726fee37"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_ResetDetection" ref="ac6eb400d17be17a0f319b3ea726fee37" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_ResetDetection </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>suite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>detectionbitvector</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Reset Detection. </p>
<p>Resets all settings and user-specific profile data for the specified detection suite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>suite</em>&nbsp;</td><td>int, <a class="el" href="namespace_py_epoc.htm#a628d63af1db40e933bd033f8bd39c42a" title="Emotiv Detection Suites.">SUITE</a> </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>detectionbivector</em>&nbsp;</td><td>bitvector, identifies specific detections. Set to zero for all detections. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000013">Todo:</a></b></dt><dd>make sure it works!! </dd></dl>

</div>
</div>
<a class="anchor" id="a4415700458a1456eb9af5b6c57b373d5"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_SaveUserProfile" ref="a4415700458a1456eb9af5b6c57b373d5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_SaveUserProfile </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>outputfilename</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Save User Profile. </p>
<p>Saves a user profile for specified user to disk. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>outputfilename</em>&nbsp;</td><td>str, filepath </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ae09f9edb953f3075e9445e98f582175f" title="Load User Profile.">EpocHandler.EE_LoadUserProfile()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0eb197157c279171f33f2df65810f090"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_SetHardwarePlayerDisplay" ref="a0eb197157c279171f33f2df65810f090" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_SetHardwarePlayerDisplay </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>playernum</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set Player number on display. </p>
<p>Sets the player number displayed on the physical input device (currently the USB Dongle) that corresponds to the specified user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, EmoEngine user ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>playernum</em>&nbsp;</td><td>int, application assigned player number displayed on input device hardware (must be in the range 1-4) </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aecb6bfe02dae4286a4e08c9193f61f4e"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_SetUserProfile" ref="aecb6bfe02dae4286a4e08c9193f61f4e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_SetUserProfile </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>userid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>profilebuffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>length</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set User Profile. </p>
<p>Loads an EmoEngine profile for the specified user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>userid</em>&nbsp;</td><td>int, User ID </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>profilebuffer</em>&nbsp;</td><td>pointer, to buffer containing a serialized user profile previously returned from EmoEngine. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>length</em>&nbsp;</td><td>int, buffer size (number of bytes) </td></tr>
  </table>
  </dd>
</dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000001">Todo:</a></b></dt><dd>Make it work!! </dd></dl>

</div>
</div>
<a class="anchor" id="a01ec1b28855539b83a575593f8950c58"></a><!-- doxytag: member="PyEpoc::EpocHandler::EE_SoftwareGetVersion" ref="a01ec1b28855539b83a575593f8950c58" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.EE_SoftwareGetVersion </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Software Version. </p>
<p>Returns the current version of the Emotiv SDK software. X.X.X.X </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>(<a class="el" href="namespace_py_epoc.htm#afc011832c875e7e34ab0437f20ee06cb" title="Emotiv Engine&#39;s Return Codes.">ERRCODE</a>, version, buildnr) </dd></dl>

</div>
</div>
<a class="anchor" id="a33ec50004b7518e4ab0c9f7123a5393f"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_AffectivEqual" ref="a33ec50004b7518e4ab0c9f7123a5393f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_AffectivEqual </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handlea</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handleb</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is Affectiv EmoStates Equal. </p>
<p>Check whether handle A are identical with B 'emotiv' state. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle A </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle B </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 , (equal / no equal) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0332bcb2a24a3da4ae8f3755b2d83f6d" title="Is Expressiv EmoStates Equal.">EpocHandler.ES_ExpressivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac58a67ce58ecfdf441ed35961094f6ca" title="Is Cognitiv EmoStates Equal.">EpocHandler.ES_CognitivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8b78caed639ba1fbac07d276af56095c" title="Is EmoEngine States Equal.">EpocHandler.ES_EmoEngineEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a51749119c8c61143d9151ae7a04efd00" title="Is EmoStateHandles Identical.">EpocHandler.ES_Equal()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0555ab6c907ae47154330662edc76009"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_AffectivGetEngagementBoredomScore" ref="a0555ab6c907ae47154330662edc76009" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_AffectivGetEngagementBoredomScore </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Affectiv Engagement/Boredom Score. </p>
<p>Return the engangement/boredom score of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>score float, (0.0 to 1.0) </dd></dl>

</div>
</div>
<a class="anchor" id="aafd92d310d45fa65bfd3d0df4550f9f2"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_AffectivGetExcitementLongTermScore" ref="aafd92d310d45fa65bfd3d0df4550f9f2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_AffectivGetExcitementLongTermScore </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Long Term Affectiv Excitement Score. </p>
<p>Returns the long term excitement level of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>score float, (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af5fce191e173ab1ed3492d613446c852" title="Get Short Term Affectiv Excitement Score.">EpocHandler.ES_AffectivGetExcitementShortTermScore()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af5fce191e173ab1ed3492d613446c852"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_AffectivGetExcitementShortTermScore" ref="af5fce191e173ab1ed3492d613446c852" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_AffectivGetExcitementShortTermScore </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Short Term Affectiv Excitement Score. </p>
<p>Returns the short term excitement level of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>score float, (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aafd92d310d45fa65bfd3d0df4550f9f2" title="Get Long Term Affectiv Excitement Score.">EpocHandler.ES_AffectivGetExcitementLongTermScore()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6b0da011bb95e768afda214d6ca67b05"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_AffectivGetFrustrationScore" ref="a6b0da011bb95e768afda214d6ca67b05" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_AffectivGetFrustrationScore </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Affectiv Frustration Score. </p>
<p>Return the frustration score of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>score float, (0.0 to 1.0) </dd></dl>

</div>
</div>
<a class="anchor" id="af27c61f6191559306a0b5382e4c99f91"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_AffectivGetMeditationScore" ref="af27c61f6191559306a0b5382e4c99f91" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_AffectivGetMeditationScore </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Affectiv Meditation Score. </p>
<p>Return the meditation score of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>score float, (0.0 to 1.0) </dd></dl>

</div>
</div>
<a class="anchor" id="a4e2469fda9af801db373cd495827c504"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_AffectivIsActive" ref="a4e2469fda9af801db373cd495827c504" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_AffectivIsActive </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>type</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is Affectiv Active. </p>
<p>Query whether the signal is too noisy for Affectiv detection to be active. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="namespace_py_epoc.htm#a35d06f6fbfbde1da9252d7d47656fd5d" title="Affectiv Algorithms.">AFFECTIVALGO</a>,affectiv</em>&nbsp;</td><td>type </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0, (active / not active) </dd></dl>

</div>
</div>
<a class="anchor" id="ac58a67ce58ecfdf441ed35961094f6ca"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_CognitivEqual" ref="ac58a67ce58ecfdf441ed35961094f6ca" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_CognitivEqual </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handlea</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handleb</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is Cognitiv EmoStates Equal. </p>
<p>Check whether two states are with identical Cognitiv state. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle A </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle B </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 , (equal / no equal) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a33ec50004b7518e4ab0c9f7123a5393f" title="Is Affectiv EmoStates Equal.">EpocHandler.ES_AffectivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0332bcb2a24a3da4ae8f3755b2d83f6d" title="Is Expressiv EmoStates Equal.">EpocHandler.ES_ExpressivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8b78caed639ba1fbac07d276af56095c" title="Is EmoEngine States Equal.">EpocHandler.ES_EmoEngineEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a51749119c8c61143d9151ae7a04efd00" title="Is EmoStateHandles Identical.">EpocHandler.ES_Equal()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7f9efe32fdc548dec0cf46830eaee072"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_CognitivGetCurrentAction" ref="a7f9efe32fdc548dec0cf46830eaee072" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_CognitivGetCurrentAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Current Cognitiv Action. </p>
<p>Returns the detected Cognitiv action of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>type , <a class="el" href="namespace_py_epoc.htm#a21e7bfe47f71883231796af4cf8566d2" title="Cognitiv Actions.">COGACTION</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a622561d0f04f2911e0ecdf18aa74a3c2" title="Get Current Cognitiv Action Power.">EpocHandler.ES_CognitivGetCurrentActionPower()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a622561d0f04f2911e0ecdf18aa74a3c2"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_CognitivGetCurrentActionPower" ref="a622561d0f04f2911e0ecdf18aa74a3c2" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_CognitivGetCurrentActionPower </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Current Cognitiv Action Power. </p>
<p>Returns the detected action power of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>value float, (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7f9efe32fdc548dec0cf46830eaee072" title="Get Current Cognitiv Action.">EpocHandler.ES_CognitivGetCurrentAction()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac7d76a241500b3d931f4f66dfef79fc8"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_CognitivIsActive" ref="ac7d76a241500b3d931f4f66dfef79fc8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_CognitivIsActive </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is Cognitiv Active. </p>
<p>Query whether the signal is too noisy for Cognitiv detection to be active. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em>1/0,(active</em>&nbsp;</td><td>/ not active) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adc2095382b1c4c030c9b82d3cfb0c1f0"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_Copy" ref="adc2095382b1c4c030c9b82d3cfb0c1f0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_Copy </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>destemostatehandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>srcemostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clone EmoStateHandle. </p>
<p>Copy srcemostatehandle to destemostatehandle </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>destemostatehandle</em>&nbsp;</td><td>handle , Destination EmoState handle </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>srcemostatehandle</em>&nbsp;</td><td>handle , Source EmoState handle </td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a134ce7f837e52b0a4bb959d310f33c62" title="Create a handle to EmoState.">EpocHandler.EE_EmoStateCreate()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8b78caed639ba1fbac07d276af56095c"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_EmoEngineEqual" ref="a8b78caed639ba1fbac07d276af56095c" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_EmoEngineEqual </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handlea</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handleb</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is EmoEngine States Equal. </p>
<p>Check whether two states are with identical EmoEngine state. This function is comparing the time since EmoEngine start, the wireless signal strength and the signal quality of different channels. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle A </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle B </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 , (equal / no equal) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a33ec50004b7518e4ab0c9f7123a5393f" title="Is Affectiv EmoStates Equal.">EpocHandler.ES_AffectivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0332bcb2a24a3da4ae8f3755b2d83f6d" title="Is Expressiv EmoStates Equal.">EpocHandler.ES_ExpressivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac58a67ce58ecfdf441ed35961094f6ca" title="Is Cognitiv EmoStates Equal.">EpocHandler.ES_CognitivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a51749119c8c61143d9151ae7a04efd00" title="Is EmoStateHandles Identical.">EpocHandler.ES_Equal()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a51749119c8c61143d9151ae7a04efd00"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_Equal" ref="a51749119c8c61143d9151ae7a04efd00" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_Equal </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handlea</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handleb</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is EmoStateHandles Identical. </p>
<p>Check whether two EmoStateHandles are identical. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle A </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle B </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 , (equal / no equal) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a33ec50004b7518e4ab0c9f7123a5393f" title="Is Affectiv EmoStates Equal.">EpocHandler.ES_AffectivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0332bcb2a24a3da4ae8f3755b2d83f6d" title="Is Expressiv EmoStates Equal.">EpocHandler.ES_ExpressivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8b78caed639ba1fbac07d276af56095c" title="Is EmoEngine States Equal.">EpocHandler.ES_EmoEngineEqual()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0332bcb2a24a3da4ae8f3755b2d83f6d"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivEqual" ref="a0332bcb2a24a3da4ae8f3755b2d83f6d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivEqual </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handlea</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>handleb</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is Expressiv EmoStates Equal. </p>
<p>Check whether two states are with identical Expressiv state, i.e. are both state representing the same facial expression. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle A </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle,Emostate</em>&nbsp;</td><td>handle B </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 , (equal / no equal) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a33ec50004b7518e4ab0c9f7123a5393f" title="Is Affectiv EmoStates Equal.">EpocHandler.ES_AffectivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ac58a67ce58ecfdf441ed35961094f6ca" title="Is Cognitiv EmoStates Equal.">EpocHandler.ES_CognitivEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8b78caed639ba1fbac07d276af56095c" title="Is EmoEngine States Equal.">EpocHandler.ES_EmoEngineEqual()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a51749119c8c61143d9151ae7a04efd00" title="Is EmoStateHandles Identical.">EpocHandler.ES_Equal()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8e0ccc2d09ff7073555b7919f1dd784b"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetClenchExtent" ref="a8e0ccc2d09ff7073555b7919f1dd784b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetClenchExtent </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Clench Extent. </p>
<p>Returns the clench extent of the user (obsolete) </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>extent float, clench extent value (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aaa78abf96688b85ef52ce9440c3c0b4d" title="Get Upper Face Action.">EpocHandler.ES_ExpressivGetUpperFaceAction()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0fca49f2c918c7e578495b619a1520fb" title="Get Upper Face Action Power.">EpocHandler.ES_ExpressivGetUpperFaceActionPower()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a221b6336fa02f2b5108e174d1a2d3a9a"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetEyebrowExtent" ref="a221b6336fa02f2b5108e174d1a2d3a9a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetEyebrowExtent </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Eyebrow Extent. </p>
<p>Returns the eyebrow extent of the user (Obsolete function). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>extent float, eyebrow extent value (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aaa78abf96688b85ef52ce9440c3c0b4d" title="Get Upper Face Action.">EpocHandler.ES_ExpressivGetUpperFaceAction()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0fca49f2c918c7e578495b619a1520fb" title="Get Upper Face Action Power.">EpocHandler.ES_ExpressivGetUpperFaceActionPower()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ae7fa4a49851f017f569e3455abd4aac5"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetEyelidState" ref="ae7fa4a49851f017f569e3455abd4aac5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetEyelidState </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Eyelid State. </p>
<p>Query the eyelids state of the user. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>The left and right eyelid state are stored in the parameter leftEye and rightEye respectively. They are floating point values ranging from 0.0 to 1.0. 0.0 indicates that the eyelid is fully opened while 1.0 indicates that the eyelid is fully closed. </dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(float lefteye , float righteye) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7d658a9c8f134499590b2e41f353bb0b" title="Expression Looking Up.">EpocHandler.ES_ExpressivIsLookingUp()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af1ac338915ee49d93b4c02a31bd1a594" title="Expression Looking Down.">EpocHandler.ES_ExpressivIsLookingDown()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5adeaa76953d48ba83c779786f4ebdfe" title="Expression Looking Left.">EpocHandler.ES_ExpressivIsLookingLeft()</a> , Epochandler:: <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa73cb70db5864e59124cd579c07ec56f" title="Expression Looking Right.">ES_ExpressivIsLookingRight()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a21be6fd4cd691579348ad85e317f9240"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetEyeLocation" ref="a21be6fd4cd691579348ad85e317f9240" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetEyeLocation </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Eye Location. </p>
<p>Query the eyes position of the user. The horizontal and vertical position of the eyes are stored in the parameter x and y respectively. They are floating point values ranging from -1.0 to 1.0. For horizontal position, -1.0 indicates that the user is looking left while 1.0 indicates that the user is looking right. For vertical position, -1.0 indicates that the user is looking down while 1.0 indicatest that the user is looking up. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>This function assumes that both eyes have the same horizontal or vertical positions. (i.e. no crossed eyes) </dd></dl>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(float x , float y) - (horizontal position / vertical position) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7d658a9c8f134499590b2e41f353bb0b" title="Expression Looking Up.">EpocHandler.ES_ExpressivIsLookingUp()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af1ac338915ee49d93b4c02a31bd1a594" title="Expression Looking Down.">EpocHandler.ES_ExpressivIsLookingDown()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5adeaa76953d48ba83c779786f4ebdfe" title="Expression Looking Left.">EpocHandler.ES_ExpressivIsLookingLeft()</a> , Epochandler:: <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa73cb70db5864e59124cd579c07ec56f" title="Expression Looking Right.">ES_ExpressivIsLookingRight()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#ae7fa4a49851f017f569e3455abd4aac5" title="Get Eyelid State.">EpocHandler.ES_ExpressivGetEyelidState()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a269c3f768e949eaf5d22e91ed5b25d10"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetLowerFaceAction" ref="a269c3f768e949eaf5d22e91ed5b25d10" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetLowerFaceAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Lower Face Action. </p>
<p>Returns the detected lower face Expressiv action of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a1c13c32f15fe2d650212ff0afe591691" title="Get Lower Face Action Power.">EpocHandler.ES_ExpressivGetLowerFaceActionPower()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aaa78abf96688b85ef52ce9440c3c0b4d" title="Get Upper Face Action.">EpocHandler.ES_ExpressivGetUpperFaceAction()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a1c13c32f15fe2d650212ff0afe591691"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetLowerFaceActionPower" ref="a1c13c32f15fe2d650212ff0afe591691" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetLowerFaceActionPower </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Lower Face Action Power. </p>
<p>Returns the detected lower face Expressiv action power of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>power float, action power (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a269c3f768e949eaf5d22e91ed5b25d10" title="Get Lower Face Action.">EpocHandler.ES_ExpressivGetLowerFaceAction()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ac6478046f17d147c21fb258fa692ae64"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetSmileExtent" ref="ac6478046f17d147c21fb258fa692ae64" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetSmileExtent </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Smile Extent. </p>
<p>Returns the smile extent of the user (Obsolete function). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>extent float, smile extent value (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aaa78abf96688b85ef52ce9440c3c0b4d" title="Get Upper Face Action.">EpocHandler.ES_ExpressivGetUpperFaceAction()</a>, <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0fca49f2c918c7e578495b619a1520fb" title="Get Upper Face Action Power.">EpocHandler.ES_ExpressivGetUpperFaceActionPower()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aaa78abf96688b85ef52ce9440c3c0b4d"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetUpperFaceAction" ref="aaa78abf96688b85ef52ce9440c3c0b4d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetUpperFaceAction </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Upper Face Action. </p>
<p>Returns the detected upper face Expressiv action of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a> </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a0fca49f2c918c7e578495b619a1520fb" title="Get Upper Face Action Power.">EpocHandler.ES_ExpressivGetUpperFaceActionPower()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a0fca49f2c918c7e578495b619a1520fb"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivGetUpperFaceActionPower" ref="a0fca49f2c918c7e578495b619a1520fb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivGetUpperFaceActionPower </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Upper Face Action Power. </p>
<p>Return the power of the upper face action of the user. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>power float, power of the action (0.0 to 1.0) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aaa78abf96688b85ef52ce9440c3c0b4d" title="Get Upper Face Action.">EpocHandler.ES_ExpressivGetUpperFaceAction()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a61768028d24bd2c1ad9d9084ad079703"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsActive" ref="a61768028d24bd2c1ad9d9084ad079703" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsActive </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>type</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Is Expressiv Active. </p>
<p>Query whether the signal is too noisy for Expressiv detection to be active. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em><a class="el" href="namespace_py_epoc.htm#afa5fdd34c0271f73f41d933590f7bb01" title="Expressiv Facial Expression.">EXPRESSIVALGO</a>,expression</em>&nbsp;</td><td>type </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0, (active / not active) </dd></dl>

</div>
</div>
<a class="anchor" id="aa2696a468a0b7da95fa2409f22e93187"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsBlink" ref="aa2696a468a0b7da95fa2409f22e93187" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsBlink </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Blinking. </p>
<p>Query whether the user is blinking at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (blink/no blink) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a8efb1f15bf8b40ad41dd875931dff5d7"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsEyesOpen" ref="a8efb1f15bf8b40ad41dd875931dff5d7" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsEyesOpen </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Eyes Open. </p>
<p>Query whether the eyes of the user are opened at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (eyes open/closed) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af997da9f8db6546c11bc5c08ef5c4d5d"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsLeftWink" ref="af997da9f8db6546c11bc5c08ef5c4d5d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsLeftWink </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Left Winking. </p>
<p>Query whether the user is winking left at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (left wink/no left wink) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="af1ac338915ee49d93b4c02a31bd1a594"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsLookingDown" ref="af1ac338915ee49d93b4c02a31bd1a594" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsLookingDown </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Looking Down. </p>
<p>Query whether the user is looking down at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (looking down/not looking down) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7d658a9c8f134499590b2e41f353bb0b" title="Expression Looking Up.">EpocHandler.ES_ExpressivIsLookingUp()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a5adeaa76953d48ba83c779786f4ebdfe"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsLookingLeft" ref="a5adeaa76953d48ba83c779786f4ebdfe" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsLookingLeft </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Looking Left. </p>
<p>Query whether the user is looking left at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (looking left/not looking left) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7d658a9c8f134499590b2e41f353bb0b" title="Expression Looking Up.">EpocHandler.ES_ExpressivIsLookingUp()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af1ac338915ee49d93b4c02a31bd1a594" title="Expression Looking Down.">EpocHandler.ES_ExpressivIsLookingDown()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aa73cb70db5864e59124cd579c07ec56f"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsLookingRight" ref="aa73cb70db5864e59124cd579c07ec56f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsLookingRight </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Looking Right. </p>
<p>Query whether the user is looking right at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (looking right/not looking right) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a7d658a9c8f134499590b2e41f353bb0b" title="Expression Looking Up.">EpocHandler.ES_ExpressivIsLookingUp()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af1ac338915ee49d93b4c02a31bd1a594" title="Expression Looking Down.">EpocHandler.ES_ExpressivIsLookingDown()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a5adeaa76953d48ba83c779786f4ebdfe" title="Expression Looking Left.">EpocHandler.ES_ExpressivIsLookingLeft()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a7d658a9c8f134499590b2e41f353bb0b"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsLookingUp" ref="a7d658a9c8f134499590b2e41f353bb0b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsLookingUp </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Looking Up. </p>
<p>Query whether the user is looking up at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (looking up/not looking up) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#abc54d16b753a9ba914ea394dc30a8512" title="Expression Right Winking.">EpocHandler.ES_ExpressivIsRightWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="abc54d16b753a9ba914ea394dc30a8512"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_ExpressivIsRightWink" ref="abc54d16b753a9ba914ea394dc30a8512" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_ExpressivIsRightWink </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Expression Right Winking. </p>
<p>Query whether the user is winking right at the time the EmoState is captured. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (right wink/no right wink) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#af997da9f8db6546c11bc5c08ef5c4d5d" title="Expression Left Winking.">EpocHandler.ES_ExpressivIsLeftWink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#aa2696a468a0b7da95fa2409f22e93187" title="Expression Blinking.">EpocHandler.ES_ExpressivIsBlink()</a> , <a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a8efb1f15bf8b40ad41dd875931dff5d7" title="Expression Eyes Open.">EpocHandler.ES_ExpressivIsEyesOpen()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a6e27c6a8b331e5e1c0415594eb3c9e53"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_GetBatteryChargeLevel" ref="a6e27c6a8b331e5e1c0415594eb3c9e53" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_GetBatteryChargeLevel </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Battery Charge Level. </p>
<p>Get the level of charge remaining in the headset battery. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>(chargelevel, maxchargelevel) - (the current level of charge in the headset battery / the maximum level of charge in the battery) </dd></dl>

</div>
</div>
<a class="anchor" id="a8a1762c564e8ca49112d274c94146f1f"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_GetContactQuality" ref="a8a1762c564e8ca49112d274c94146f1f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_GetContactQuality </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>sensorid</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Contact Quality. </p>
<p>Get the contact quality of a specific sensor. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sensorid</em>&nbsp;</td><td>int, id of the sensor to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd><a class="el" href="namespace_py_epoc.htm#a483b592c5c7b267c840da223400e34ed" title="EEG Sensor Contact Quality.">CONTACTQUALITY</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a37e16b7c066e36fad0b320ae1dc65542"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_GetContactQualityFromAllChannels" ref="a37e16b7c066e36fad0b320ae1dc65542" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_GetContactQualityFromAllChannels </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Contact Quality From All Channels. </p>
<p>Query the contact quality of all the electrodes in one single call. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>The contact quality will be stored in the array, contactQuality, passed to the function. The value stored in contactQuality[0] is identical to the result returned by ES_GetContactQuality(state, 0) The value stored in contactQuality[1] is identical to the result returned by ES_GetContactQuality(state, 1). etc. The ordering of the array is consistent with the ordering of the logical input channels in <a class="el" href="namespace_py_epoc.htm#abbb04e7788f2c405c173ed5ee82df869" title="Input Channels.">PyEpoc.INPUTCHANNELS</a> . </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.htm#_todo000014">Todo:</a></b></dt><dd>Make it work! </dd></dl>

</div>
</div>
<a class="anchor" id="af91e99ded2ba15eada0879d09f6fea79"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_GetHeadsetOn" ref="af91e99ded2ba15eada0879d09f6fea79" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_GetHeadsetOn </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Headset On/Off. </p>
<p>Return whether the headset has been put on correctly or not. If the headset cannot not be detected on the head, then signal quality will not report any results for all the channels </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>1/0 (on or off) </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a134ce7f837e52b0a4bb959d310f33c62" title="Create a handle to EmoState.">EpocHandler.EE_EmoStateCreate()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a99ca22609f25a62e857867409178ce49"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_GetNumContactQualityChannels" ref="a99ca22609f25a62e857867409178ce49" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_GetNumContactQualityChannels </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Number Of Channels With Contact Quality Data. </p>
<p>Get the number of channels with available sensor contact quality data. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>int, number of channels with contact quality data available. </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a134ce7f837e52b0a4bb959d310f33c62" title="Create a handle to EmoState.">EpocHandler.EE_EmoStateCreate()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a04590107c58fc8462397fa5ea36add9a"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_GetTimeFromStart" ref="a04590107c58fc8462397fa5ea36add9a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_GetTimeFromStart </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Time From Start. </p>
<p>Return the time since EmoEngine has been successfully connected to the headset. If the headset is disconnected from EmoEngine due to low battery or weak wireless signal,<br/>
 the time will be reset to zero. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>float seconds </dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="class_py_epoc_1_1_epoc_handler.htm#a134ce7f837e52b0a4bb959d310f33c62" title="Create a handle to EmoState.">EpocHandler.EE_EmoStateCreate()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="aeac246aea82974e7813733c58e31f01d"></a><!-- doxytag: member="PyEpoc::EpocHandler::ES_GetWirelessSignalStatus" ref="aeac246aea82974e7813733c58e31f01d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">def PyEpoc.EpocHandler.ES_GetWirelessSignalStatus </td>
          <td>(</td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>self</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>emostatehandle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get Wireless Signal Status. </p>
<p>Get the current wireless signal strength. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>emostatehandle</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>signalstrength, <a class="el" href="namespace_py_epoc.htm#ad7fc85eb9d192da2d612cf5bb6d7de95" title="Wireless Signal Strength.">SIGNALSTRENGTH</a> </dd></dl>

</div>
</div>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Sun Apr 4 05:39:07 2010 for PyEpoc by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.2 </small></address>
</body>
</html>
